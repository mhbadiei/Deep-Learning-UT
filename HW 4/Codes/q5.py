# -*- coding: utf-8 -*-
"""Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i3Fwk6RkiObS8ZgiyQIJC8zVsjSVDjI6
"""

import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive
drive.mount('/content/gdrive')
import pandas as pd

class SOMFasionMNIST():
    def __init__(self):
        self.n = 20
        self.data = np.array(pd.read_csv("gdrive/MyDrive/Colab Notebooks/HW4/Q5/fashion-mnist_test.csv"))[:, 1:]

    def train(self, learningRate):
        self.learningR = learningRate
        self.trainTestSplit()
        self.weights = np.random.rand(15, 15, 784)
        self.train_()
        
    def train_(self):
        for epoch in range(self.n):    
            for x in self.xTrain:
                d = np.linalg.norm(self.weights-x, axis=2)
                m, n = np.where(d == np.min(d))[0][0], np.where(d == np.min(d))[1][0]
                self.weights[m-1:m+2, n-1:n+2] = (x-self.weights[m-1:m+2, n-1:n+2])*self.learningR + self.weights[m-1:m+2, n-1:n+2]
            self.learningR = self.learningR **2

    def trainTestSplit(self):
        self.xTrain = [self.data[m] for m in range(1000)]
        self.xTest = [self.data[m+1000] for m in range(300)]
        
    def showResults(self):
        self.clusters = {}
        for test in self.xTest:
            d = np.linalg.norm(test-self.weights, axis=2)
            m, n = np.where(d==np.min(d))[0][0], np.where(d==np.min(d))[1][0]
            if str(m * np.shape(self.weights)[0] + n) in self.clusters.keys():
                self.clusters[str(m*len(self.weights)+n)] =self.clusters[str(m*len(self.weights)+n)]+1
            else:
                self.clusters[str(m * np.shape(self.weights)[0] + n)] = 1
        self.clusters = {x: y for x, y in sorted(self.clusters.items(), key=lambda item: item[1], reverse=True)}        
        i_ = [int(idx) for idx in list(self.clusters.keys())]
        fig, axs = plt.subplots(5, 6, figsize=(12, 12))
        for k in range(0, 30):
            m = k // 6
            n = k % 6
            axs[m, n].imshow(self.weights[[var % np.shape(self.weights)[0] for var in i_[0:30]], [var // np.shape(self.weights)[0] for var in i_[0:30]]][k].reshape(28, 28), cmap="gray")
        plt.figure(figsize=(12, 6))
        plt.plot(list(self.clusters.keys()), list(self.clusters.values()),'r')
        plt.xlabel("Cluster No.")
        plt.ylabel("Number of test data maped")
        plt.title("SOM for Fashion MNIST")
        plt.show()

if __name__ == "__main__":
  model = SOMFasionMNIST()
  model.train(learningRate = 0.5)
  model.showResults()